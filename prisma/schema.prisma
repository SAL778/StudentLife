generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider        = "postgresql"
  url             = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl       = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

// Define the User model
model User {
  id                 Int                @id @default(autoincrement())
  username           String             @unique
  email              String             @unique
  videos             Video[]
  comments           Comment[]
  account            Account?
  verificationToken  VerificationToken?
  sessions           Session[]
}

// Define the Video model
model Video {
  id                 Int        @id @default(autoincrement())
  title              String
  description        String
  url                String     @unique
  upvotes            Int        @default(0)
  downvotes          Int        @default(0)
  user               User       @relation(fields: [userId], references: [id])
  userId             Int
  comments           Comment[]
  files              File[]
}

// Define the Comment model
model Comment {
  id                 Int        @id @default(autoincrement())
  content            String
  user               User       @relation(fields: [userId], references: [id])
  userId             Int
  video              Video      @relation(fields: [videoId], references: [id])
  videoId            Int
}

// Define the Account model
model Account {
  id                 Int        @id @default(autoincrement())
  sessionId          String     @unique
  user               User       @relation(fields: [userId], references: [id])
  userId             Int       @unique
}

// Define the VerificationToken model
model VerificationToken {
  id                 Int        @id @default(autoincrement())
  token              String     @unique
  user               User       @relation(fields: [userId], references: [id])
  userId             Int       @unique
  createdAt          DateTime   @default(now())
}

// Define the Session model
model Session {
  id                 Int        @id @default(autoincrement())
  token              String     @unique
  user               User       @relation(fields: [userId], references: [id])
  userId             Int
  createdAt          DateTime   @default(now())
}

// Define the File model
model File {
  url       String  @unique
  mediaType String
  width     Int
  height    Int
  video     Video?   @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId   Int?
}
